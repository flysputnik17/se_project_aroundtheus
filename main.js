!function(){"use strict";class t{constructor(t,e,s){let{title:o,link:r}=t;this.title=o,this.link=r,this._cardSelector=e,this._handleImageClick=s}_handleLikeButton(){this._likeButton.classList.toggle("card__description-button_liked")}_handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}_setEventListeners(){this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton()}))}_getElement(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getElement(),this._cardTitleEl=this._cardElement.querySelector(".card__description-title"),this._cardImageEl=this._cardElement.querySelector(".card__img"),this._likeButton=this._cardElement.querySelector(".card__description-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardTitleEl.textContent=this.title,this._cardImageEl.src=this.link,this._cardImageEl.alt=this.title,this._setEventListeners(),this._cardElement}}class e{constructor(t,e){this._form=e,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}toggleButtonState(t){this._hasInvalidInput(t)?(this.submitButton.classList.add(this._inactiveButtonClass),this.submitButton.disabled=!0):(this.submitButton.classList.remove(this._inactiveButtonClass),this.submitButton.disabled=!1)}_showInputError(t){const e=this._form.querySelector(`.${t.id}-error`);t.classList.add(this._inputErrorClass),e.classList.add(this._errorClass),e.textContent=t.validationMessage}_hideInputError(t){const e=this._form.querySelector(`.${t.id}-error`);t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this.submitButton=this._form.querySelector(this._submitButtonSelector),this.toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this.toggleButtonState(t)}))}))}resetValidation(){this._form.reset(),this.toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}}class s{constructor(t){this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(t=>{t.target.classList.contains("modal_opened")&&this.close(),t.target.classList.contains("modal__close-button")&&this.close()}))}}class o extends s{constructor(t,e){super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupForm.querySelectorAll(".modal__form-input"),this._handleFormSubmit=e}close(){this._popupForm.reset(),super.close()}_getInputValues(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const r=document.querySelector(".profile__edit-button"),n=document.querySelector(".profile__add-button"),i=document.querySelector(".profile-modal"),a=document.forms["profile-form"],l=(document.querySelector(".profile__name"),i.querySelector("#modal__form-name")),c=(document.querySelector(".profile__descripton"),i.querySelector("#modal__form-job")),u=document.querySelector(".card-modal"),d=(u.querySelector("#modal__form-title"),u.querySelector("#modal__form-url"),document.forms["card-form"]),m=(document.querySelectorAll(".modal"),document.querySelector(".cards"),document.querySelector(".image-modal")),_=(m.querySelector(".modal__img-card-img"),m.querySelector(".modal__img-title"),{formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__form-button",inactiveButtonClass:"modal__form-button-inactive",inputErrorClass:"modal__form-input-error",errorClass:"modal__form-error-active"}),h=new e(_,a),p=new e(_,d),E=new o(".profile-modal",(function(t){v.setUserInfo(t.name,t.descripton),E.close()}));E.setEventListeners();const f=new o(".card-modal",(function(t){g.addItem(y(t)),p.resetValidation(),f.close()}));f.setEventListeners();const S=new class extends s{constructor(t){super(t),this._popupImageSrc=this._popupElement.querySelector(".modal__img-card-img"),this._popupTitle=this._popupElement.querySelector(".modal__img-title")}open(t){let{title:e,link:s}=t;this._popupTitle.textContent=e,this._popupImageSrc.src=s,this._popupImageSrc.alt=e,super.open()}}(".image-modal");S.setEventListeners();const g=new class{constructor(t,e){let{items:s,renderer:o}=t;this._items=s,this._renderer=o,this._cardSelector=document.querySelector(e)}renderItems(){this._items.forEach((t=>{let{name:e,link:s}=t;const o={title:e,link:s},r=this._renderer(o);this.addItem(r)}))}addItem(t){this._cardSelector.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:y},".cards"),v=new class{constructor(t,e){this._name=document.querySelector(t),this._job=document.querySelector(e)}getUserInfo(){return{name:this._name.textContent,description:this._job.textContent}}setUserInfo(t,e){this._name.textContent=t,this._job.textContent=e}}(".profile__name",".profile__descripton");function L(t){S.open(t)}function y(e){return new t(e,"#card-template",L).getView()}r.addEventListener("click",(function(){const t=v.getUserInfo();h.resetValidation(),l.value=t.name,c.value=t.description,E.open()})),n.addEventListener("click",(()=>{f.open()})),g.renderItems(),h.enableValidation(),p.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,