!function(){"use strict";class e{constructor(e,t,s,r,i){let{name:o,link:n,_id:a,isLiked:l}=e;this.title=o,this.link=n,this._id=a,this.isLiked=l,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikedClick=i}_handleLikeButton(){this.isLiked?this._likeButton.classList.add("card__description-button_liked"):this._likeButton.classList.remove("card__description-button_liked")}setLike(e){this.isLiked=e,this._handleLikeButton(this)}_setEventListeners(){this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this)})),this._likeButton.addEventListener("click",(()=>{this._handleLikedClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}_getElement(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}removeCardElement(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getElement(),this._cardTitleEl=this._cardElement.querySelector(".card__description-title"),this._cardImageEl=this._cardElement.querySelector(".card__img"),this._likeButton=this._cardElement.querySelector(".card__description-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardTitleEl.textContent=this.title,this._cardImageEl.src=this.link,this._cardImageEl.alt=this.title,this._setEventListeners(),this._handleLikeButton(),this._cardElement}}class t{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(e){this._hasInvalidInput(e)?(this.submitButton.classList.add(this._inactiveButtonClass),this.submitButton.disabled=!0):(this.submitButton.classList.remove(this._inactiveButtonClass),this.submitButton.disabled=!1)}_showInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this.submitButton=this._form.querySelector(this._submitButtonSelector),this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState(e)}))}))}resetValidation(){this._form.reset(),this.toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close(),e.target.classList.contains("modal__close-button")&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupForm.querySelectorAll(".modal__form-input"),this._submitButton=this._popupElement.querySelector(".modal__form-button"),this._handleFormSubmit=t}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setLoading(e){this._submitButton.textContent=e?"Saving...":"Save"}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const i=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__add-button"),n=document.querySelector(".profile-modal"),a=document.forms["profile-form"],l=document.forms["avatar-form"],c=(document.querySelector(".profile__img"),document.querySelector(".profile__name"),n.querySelector("#modal__form-name"),document.querySelector(".profile__descripton"),n.querySelector("#modal__form-job"),document.querySelector(".profile__content-button")),d=document.querySelector(".card-modal"),h=(d.querySelector("#modal__form-title"),d.querySelector("#modal__form-url"),document.forms["card-form"]),u=(document.querySelectorAll(".modal"),document.querySelector(".cards"),document.querySelector(".image-modal")),_=(u.querySelector(".modal__img-card-img"),u.querySelector(".modal__img-title"),document.querySelector(".card"),{formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__form-button",inactiveButtonClass:"modal__form-button-inactive",inputErrorClass:"modal__form-input-error",errorClass:"modal__form-error-active"}),m=new t(_,a),p=new t(_,h),f=new t(_,l),E=new r(".profile-modal",(function(e){E.setLoading(!0),g.updateUserInfo(e.name,e.descripton).then((()=>{k.setUserInfo(e.name,e.descripton),E.close()})).catch((e=>{console.error("Error in updateUserInfo:",e),e instanceof SyntaxError&&console.error("Response body:",e.body)})).finally((()=>{E.setLoading(!1)}))}));E.setEventListeners();const L=new r(".card-modal",(function(e){L.setLoading(!0),g.addNewCard(e.title,e.link,e._id).then((e=>{b.addItem(I(e)),p.resetValidation(),L.close()})).catch((e=>{console.error("Error in addNewCard:",e)})).finally((()=>{L.setLoading(!1)}))}));L.setEventListeners();const S=new r(".avatar-modal",(function(e){S.setLoading(!0),g.upDateAvater(e.link).then((e=>{k.loadUserInfo(e.name,e.about,e.avatar),S.close()})).catch((e=>{console.error("Error in upDateAvatar:",e)})).finally((()=>{S.setLoading(!1)}))}));S.setEventListeners();const v=new class extends s{constructor(e){super(e),this._popupImageSrc=this._popupElement.querySelector(".modal__img-card-img"),this._popupTitle=this._popupElement.querySelector(".modal__img-title")}open(e){let{title:t,link:s}=e;this._popupTitle.textContent=t,this._popupImageSrc.src=s,this._popupImageSrc.alt=t,super.open()}}(".image-modal");v.setEventListeners();const b=new class{constructor(e,t){let{items:s=[],renderer:r}=e;this._items=s,this._renderer=r,this._cardsContainer=document.querySelector(t)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._cardsContainer.prepend(e)}}({items:[],renderer:I},".cards"),k=new class{constructor(e,t,s){this._name=document.querySelector(e),this._job=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,descripton:this._job.textContent}}setUserInfo(e,t){this._name.textContent=e,this._job.textContent=t}loadUserInfo(e,t,s){this.setUserInfo(e,t),this._avatar.src=s}}(".profile__name",".profile__descripton",".profile__img"),y=new class extends s{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._confirmationButton=this._popupElement.querySelector(".modal__form-button")}setSubmitAction(e){this._handleSubmit=e}setDeleteLoading(e){this._confirmationButton.textContent=e?"Deleting...":"Yes"}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}}(".confirmation-modal");y.setEventListeners();const g=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():(console.error(e.status),Promise.reject(`Error:${e.status}`))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}upDateAvater(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}updateUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}addNewCard(e,t,s){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t,_id:s})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"bfb869e8-08ec-4b67-8cc1-518f5a35ed9e","Content-Type":"application/json"}});function C(e){v.open(e)}function I(t){return new e(t,"#card-template",C,q,B).getView()}function q(e){y.open(),y.setSubmitAction((()=>{y.setDeleteLoading(!0),g.deleteCard(e._id).then((t=>{e.removeCardElement(t),t&&y.close()})).catch((e=>{console.error(`${e} Failed to delete post.`),console.error("Error in deleteCard:",error)})).finally((()=>{y.setDeleteLoading(!1)}))}))}function B(e){e.isLiked?g.dislikeCard(e._id).then((t=>{e.setLike(t.isLiked)})).catch((e=>{console.error("Error in dislikeCard:",e)})):g.likeCard(e._id).then((t=>{e.setLike(t.isLiked)})).catch((e=>{console.error("Error in the LikeCard:",e)}))}i.addEventListener("click",(function(){m.resetValidation(),E.setInputValues(k.getUserInfo()),E.open()})),o.addEventListener("click",(()=>{p.resetValidation(),L.open()})),c.addEventListener("click",(()=>{f.resetValidation(),S.open()})),m.enableValidation(),p.enableValidation(),f.enableValidation(),g.getInitialCards().then((e=>{e.forEach((e=>{const t=I(e);b.addItem(t)}))})).catch((e=>{console.error("Error in getInitialCards:",e)})),g.getUserInfo().then((e=>{k.loadUserInfo(e.name,e.about,e.avatar)})).catch((e=>{console.error("Error in getUserInfo:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNsQndDLEVBQXFCeEMsbUJBQ3JCeUMsRUFBc0J6QyxtQkFHdEI0QyxFQUNHZ0Usa0JBQ0E3RCxNQUFNVSxJQUNMQSxFQUFTNUQsU0FBU3FILElBQ2hCLE1BQU1LLEVBQVUxRCxFQUFXcUQsR0FDM0J2RCxFQUFhQyxRQUFRMkQsRUFBUSxHQUM3QixJQUtIckUsT0FBT0MsSUFDTkMsUUFBUUQsTUFBTSw0QkFBNkJBLEVBQU0sSUFHckRQLEVBQ0cwQyxjQUNBdkMsTUFBTUosSUFDTEssRUFBU2tCLGFBQWF2QixFQUFTOUcsS0FBTThHLEVBQVN3QixNQUFPeEIsRUFBU29CLE9BQU8sSUFLdEViLE9BQU9DLElBQ05DLFFBQVFELE1BQU0sd0JBQXlCQSxFQUFNLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeyBuYW1lLCBsaW5rLCBfaWQsIGlzTGlrZWQgfSxcclxuICAgIGNhcmRTZWxlY3RvcixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVDbGljayxcclxuICAgIGhhbmRsZUxpa2VkQ2xpY2tcclxuICApIHtcclxuICAgIHRoaXMudGl0bGUgPSBuYW1lO1xyXG4gICAgdGhpcy5saW5rID0gbGluaztcclxuICAgIHRoaXMuX2lkID0gX2lkO1xyXG4gICAgdGhpcy5pc0xpa2VkID0gaXNMaWtlZDtcclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrOyAvL3Bhc3NpbmcgdGhlIGltZ0NsaWNrIGZ1bnRpb24gZm9ybSB1bmRleCxqc1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljazsgLy9wYXNzaW5nIHRoZSBkZWxldGUgZnVuY3Rpb24gZnJvbSB0aGUgaW5kZXguanMgdGhhdCB3aWxsIGJlIHRyaWdnZXJkIHdoZW4gdGhlIGRlbGV0ZSBpY29uIGlzIGNsaWNrZWRcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VkQ2xpY2sgPSBoYW5kbGVMaWtlZENsaWNrOyAvL3Bhc3NpbmcgdGhlIGhhbmRsZUxpa2VkQnV0dG9uQ2xpY2sgZnVuY2l0b24gZnJvbSB0aGUgaW5kZXguanNcclxuICB9XHJcblxyXG4gIF9oYW5kbGVMaWtlQnV0dG9uKCkge1xyXG4gICAgaWYgKHRoaXMuaXNMaWtlZCkge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19kZXNjcmlwdGlvbi1idXR0b25fbGlrZWRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19kZXNjcmlwdGlvbi1idXR0b25fbGlrZWRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL3RoaXMgZnVuY3Rpb24gd2lsbCBnZXQgYSB0cnVlIG9yIGZhbHNlIGZyb20gdGhlIGFwaSB0aGF0IHdlIGNhbGwgYmVmb3JlXHJcbiAgLy9jYWxsaW5nIHRoaXMgZnVuY3Rpb24gYW5kIHRoZW4gd2UgcGFzcyB0aGUgcmVzdWx0IG9mIHRoZSBhcGkgY2FsbCB0byB0aGlzXHJcbiAgLy9mdW5jdGlvbiBhbmQgc2V0IHRoZSBpc0xpa2VkIG1hbnVhbHkgdG8gdGhlIGltZ1xyXG4gIC8vYWxzbyB3ZSBjYWxsaW5nIHRoZSBoYW5kbGVMaWtlQnV0dG9uIHRvIHRvZ2dsZSB0aGUgYnV0dG9uIGNsYXNzU1xyXG4gIHNldExpa2UoaXNMaWtlZCkge1xyXG4gICAgdGhpcy5pc0xpa2VkID0gaXNMaWtlZDtcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24odGhpcyk7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKHRoaXMpOyAvL2V2ZW50IGxpc3RlbmVyIGZvciB0aGUgaW1nIHRoYXkgd2lsbCBvcGVuIHVwb24gY2xpY2tcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZWRDbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayh0aGlzKTsgLy90aGUgKHRoaXMpIGlzIGZvciB0aGF0IHRoZSBjb2RlIHdpbGwga25vdyBvbiB3aWNoIGNhcmQgY2FsbCB0aGUgZGVsZXRlIGZ1bmN0aW9uXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vZnVuY3Rpb24gdG8gY2xvbmVpbmcgdGhlIGNhcmQgdGVtcGxldGVcclxuICBfZ2V0RWxlbWVudCgpIHtcclxuICAgIHJldHVybiBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLy9yZW1vdmVDYXJkRWxlbWVudCBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBmb3JtIHRoZSBpbmRleC5qcyB0byByZW1vdmUgdGhlIGNhcmQgYWZ0ZXIgYWxsIHRoZSBldmVudExpc3RlbmVycyBhcmUgYWN0aXZlXHJcbiAgcmVtb3ZlQ2FyZEVsZW1lbnQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vLy8vLy9nZXRWaWV3IGlzIGEgcHVibGljIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNhcmQgZWxlbWVudC8vLy8vLy8vLy8vLy8vL1xyXG4gIGdldFZpZXcoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldEVsZW1lbnQoKTsgLy9jYWxsaW5nIHRoaXMgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIGNhcmQgYW5kIHNhdmUgaXQgb24gdGhlIGNhcmRFbGVtZW50XHJcbiAgICB0aGlzLl9jYXJkVGl0bGVFbCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLmNhcmRfX2Rlc2NyaXB0aW9uLXRpdGxlXCJcclxuICAgICk7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1nXCIpO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLmNhcmRfX2Rlc2NyaXB0aW9uLWJ1dHRvblwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2NhcmRUaXRsZUVsLnRleHRDb250ZW50ID0gdGhpcy50aXRsZTsgLy9wdXRpbmcgdGhlIHRpdGxlIHRvIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGNhcmQgdGhhdCBpIHJlc2l2aW5nXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbC5zcmMgPSB0aGlzLmxpbms7IC8vcHV0aW5nIHRoZSBsaW5rIHRvIHNyYyBvZiB0aGUgY2FyZCB0byByZW5kZXIgdGhlIGltZ1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWwuYWx0ID0gdGhpcy50aXRsZTsgLy9jb3BpbmcgdGhlIHRpdGxlIHRvIHB1dCBpdCBhcyBhbiBhbHQgb2YgdGhlIGltZ1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7IC8vY2FsbGluZyB0aGUgZXZlbnRMaXN0ZW5lcnNcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24oKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7IC8vL3JldHVybmluZyB0aGUgY2FyZCBlbGVtZW50XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9mb3JtID0gZm9ybUVsZW1lbnQ7IC8vc3RvcmluZyB0aGUgZm9ybSBlbGVtZW50IGluc2lkZSB0aGlzLl9mb3JtXHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGNvbmZpZy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlnLmVycm9yQ2xhc3M7XHJcbiAgfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7IC8vcmV0dXJuaW5nIHRydWUgaWYgdGhlcmUgaXMgYXRsZWFzdCBvbmUgZmFsc2UgYW5kIHRoZW4gYnkgdGhlICEgaSByZXR1cm5pbmcgZmFsc2VcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0RWxlbWVudCkpIHtcclxuICAgICAgdGhpcy5zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlOyAvL2lmIHRoZSBoYXNJbnZhbGlkSW5wdXQgcmV0dXJuaW5nIHRydWUgdGhhdCBtZWFucyB0aGF0IHRoZXJlIGlzIHNvbWUgaW52YWxpZCBpbnB1dHMgYW5kIGkgbmVlZCB0byBkaXNhYmxlZCB0aGUgYnV0dG9uXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlOyAvL2lmIHRoZSBoYXNJbnZhbGlkSW5wdXQgcmV0dXJuaW5nIGZhbHNlIHRoYXQgbWVhc25zIHRoYXQgYWxsIHRoZSBpbnB1dCBmaWVsZHMgYXJlIHZhbGlkIGFuZCBpIG5lZWQgdG8gYWN0aXZhdGUgdGhlIGJ1dHR1blxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7IC8vc3RvcmluZyB0aGUgZXJyb3JFbGVtZW50IGJ5IHRoZSBpbnB1dCBlbGVtZW50IGlkIGZyb20gdGhlIEhUTUxcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7IC8vYWRkIHRoZSBlcnJvciBjbGFzcyB0byBpdFxyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7IC8vaW5wdXQgdGhlIGdlbmVyaWMgZXJyb3IgbWFzc2VnZVxyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8vdGhlIHNlckV2ZW50TGlzdGVuZXJzIGZ1bmN0aW9uIGlzIHRoZSBtYWluIGZ1bmN0aW9uIHRoYXQgbGlzdGVuIHRvIGFsbCBldmVudHMgaW4gdGhlIGZvcm0gaXRzIGNyZWF0aW5nIGEgYXJyYXkgZnJvbSBhbGwgdGhlIGZvcm1zIHRoYXQgaGFkZSB0aGUgY2xhc3Mgb2YgbW9kYWxcclxuICAvL2FuZCB0aGVuIGZvciBlYWNoIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgYXJyYXkgdGhhdCB3YXMgY3JlYXRlZCBpdCBydW5pbmcgdGhlIF9jaGVja0lucHV0VmFsaWRpdHkgYW5kIHRvZ2dsZUJ1dHRvblN0YXRlIGZ1bmN0aW9uIG9uIGV2ZXJ5IGlucHV0IGV2ZW50IGluIHRoZSBmb3JtXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG4gICAgdGhpcy5zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTsgLy9pdGVyYXRpbmcgb3ZlciBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycnJheSB0aGF0IGlzIHJlcHJlc2VudGluZyBhbiBpbnB1dCBmaWVsZCBhbmQgY2FsbGluZyBvbiBldmVyeSBvbmUgb2YgdGhlbSB0aGUgY2hlY2tJbnB1dFZhbGlkaXR5IGZ1bmN0aW9uXHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy9yZXNldFZhbGlkYXRpb24gZnVuY2l0b24gaXMgYSBwdWJsaWMgZnVuYyBzbyBpIGNhbiBjYWxsIGl0IGZyb20gdGhlIGluZGV4LmpzIHRvIHJlc2V0IHRoZSBpbnB1dHMgYW5kIHRoZSBzdWJtaXQgYnV0dG9uc1xyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICAvL29wZW5pbmcgdGhlIHBvcHVwIGJ5IGFjY2VwdGluZyB0aGUgcG9wdXBTZWxlY3RvclxyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIC8vY2xvc2luZyB0aGUgcG9wdXBcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgLy9jbG9zaW5nIHRoZSBwb3B1cCBieSBwcmVzaW5nIHRoZSBFU0MgYnV0dG9uXHJcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvL3NldCBsaXN0ZW5lcnMgZm9yIHBvcHVwIGZvciB0aGUgY2xvc2UgYnV0dG9uIGFuZCBvdmVybHkgb2YgdGhlIHBvcHVwIHdpbmRvd1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9vcGVuZWRcIikpIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlLWJ1dHRvblwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpOyAvL3NlbGVjdGluZyB0aGUgcG9wdXAgZm9ybSBieSBpdHMgY2xhc3MgbW9kYWxfZm9ybVxyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2Zvcm0taW5wdXRcIik7IC8vZnJvbSB0aGUgZm9ybSBzZWxlY3RpbmcgYWxsIHRoZSBpbnB1dHNcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5tb2RhbF9fZm9ybS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0OyAvL2l0cyB0aGUgZnVuY3Rpb24gZm9yIHRoZSBzdWJtaXRcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7IC8vcmVzZXRpbmcgdGhlIGlucHV0cyBvZiB0aGUgcG9wdXAgZm9ybVxyXG4gICAgc3VwZXIuY2xvc2UoKTsgLy9jYWxsaW5nIHRoZSBjbG9zZSBtZXRob2Qgb2YgdGhlIFBvcHVwIHBhcmVudCBjbGFzcyBzaW5jZSB0aGUgY2xvc2UgbWV0aG9kIG9mIHRoZSBjaGlsZCBvbmx5IHJlc2V0aW5nIHRoZSBpbnB1dHMgYW5kIHRoZSBwYXJlbnQgY2xvc2UgbWV0aG9kIGNsb3NpbmcgdGhlIHBvcHVwIGl0c2VsZlxyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTsgLy9jcmVhdGluZyBhbiBhYmplY3QgdG8gc3RvcmUgdGhlIGlucHV0c1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7IC8vaXRyZXRpbmcgb3ZlciBhbGwgdGhlIGlucHV0cyBhbmQgc3RvcmluZyB0aGVtIGluIHRoZSBpbnB1dExpc3Qgb2JqZWN0XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldElucHV0VmFsdWVzKGRhdGEpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAvLyBoZXJlIHlvdSBpbnNlcnQgdGhlIGB2YWx1ZWAgYnkgdGhlIGBuYW1lYCBvZiB0aGUgaW5wdXRcclxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRMb2FkaW5nKGxvYWRpbmcpIHtcclxuICAgIGlmIChsb2FkaW5nKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTsgLy9jYWxsaW5nIHRoZSBzdWJtaXQgZnVuY2l0b24gYW5kIHBhc2luZyBpdCB0aGUgaW5wdXRzIG9iamVjdFxyXG4gICAgfSk7XHJcblxyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTsgLy9jYWxsaW5nIHRoZSBwYXJlbnQgc2V0RXZlbnQgbWV0aG9kIHNpbmNlIHRoZSBjaGlsZCBtZXRob2Qgb25seSB3YWl0aW5nIGZvciBhIHN1Ym1pdCBldmVudCBidXQgd2UgbmVlZCBpdCBhbHNvIGJlIGViYWxlIHRvIGxpc3RlbiBmb3IgdGhlXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAgLy8ge1xyXG4gIC8vICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAvLyAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcclxuICAvLyAgIGlkOiBcIjFcIixcclxuICAvLyB9LFxyXG4gIC8vIHtcclxuICAvLyAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAvLyAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcclxuICAvLyAgIGlkOiBcIjJcIixcclxuICAvLyB9LFxyXG4gIC8vIHtcclxuICAvLyAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAvLyAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuICAvLyAgIGlkOiBcIjNcIixcclxuICAvLyB9LFxyXG4gIC8vIHtcclxuICAvLyAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gIC8vICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhdGVtYXIuanBnXCIsXHJcbiAgLy8gICBpZDogXCI0XCIsXHJcbiAgLy8gfSxcclxuICAvLyB7XHJcbiAgLy8gICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gIC8vICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXHJcbiAgLy8gICBpZDogXCI1XCIsXHJcbiAgLy8gfSxcclxuICAvLyB7XHJcbiAgLy8gICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgLy8gICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIixcclxuICAvLyAgIGlkOiBcIjZcIixcclxuICAvLyB9LFxyXG5dO1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyB0aGUgbW9kYWwgZWxlbWVudHMgc2VsZWN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5leHBvcnQgY29uc3QgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7IC8vdGhlIHByb2ZpbGUgZWRpdCBidXR0b24gc2VsZWN0XHJcbmV4cG9ydCBjb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2FkZC1idXR0b25cIik7IC8vIHRoZSBzZWxlY3Rpb24gb2YgYWRkIGJ1dHRvblxyXG5leHBvcnQgY29uc3QgcHJvZmlsZU1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlLW1vZGFsXCIpOyAvL3RoZSBtb2RhbCBzZWxlY3RpbmdcclxuXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LmZvcm1zW1wicHJvZmlsZS1mb3JtXCJdOyAvL3RoZSBtb2RhbCBmb3JtIHNlbGVjdGluZ1xyXG5cclxuZXhwb3J0IGNvbnN0IGF2YXRhckZvcm0gPSBkb2N1bWVudC5mb3Jtc1tcImF2YXRhci1mb3JtXCJdO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF2YXRhckltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWdcIik7XHJcblxyXG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX25hbWVcIik7IC8vdGhlIHByb2ZpbGUgbmFtZSBmcm9tIHRoZSBwYWdlXHJcbmV4cG9ydCBjb25zdCBuYW1lSW5wdXQgPSBwcm9maWxlTW9kYWwucXVlcnlTZWxlY3RvcihcIiNtb2RhbF9fZm9ybS1uYW1lXCIpOyAvL3RoZSBwcm9maWxlIG5hbWUgaW5wdXQgaW4gbW9kYWxcclxuXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlSm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19kZXNjcmlwdG9uXCIpOyAvL3RoZSBwcm9maWxlIGpvYiBmcm9tIHRoZSBwYWdlXHJcbmV4cG9ydCBjb25zdCBqb2JJbnB1dCA9IHByb2ZpbGVNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsX19mb3JtLWpvYlwiKTsgLy90aGUgcHJvZmlsZSBqb2IgaW5wdXQgZm9ybSBtb2RhbFxyXG5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZUF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fY29udGVudC1idXR0b25cIik7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gdGhlIEFkZCBtb2RhbCBlbGVtZW50cyBzZWxlY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5leHBvcnQgY29uc3QgYWRkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmQtbW9kYWxcIik7IC8vIHRoZSBhZGQgbW9kYWwgc2VsZWN0aW9uXHJcbmV4cG9ydCBjb25zdCBpbWdOYW1lID0gYWRkTW9kYWwucXVlcnlTZWxlY3RvcihcIiNtb2RhbF9fZm9ybS10aXRsZVwiKTsgLy9pbWcgbW9kYWwgc2VsZWN0aW9uXHJcbmV4cG9ydCBjb25zdCBpbWdVcmwgPSBhZGRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsX19mb3JtLXVybFwiKTsgLy9pbWcgdXJsIGVsZW1lbnQgc2VsZWN0aW9uXHJcbmV4cG9ydCBjb25zdCBjYXJkRm9ybSA9IGRvY3VtZW50LmZvcm1zW1wiY2FyZC1mb3JtXCJdO1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vdGhlIG1vZGFscyBlbGVtZW50IHNlbGVjdGlvbnMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxcIik7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIHRoZSBjYXJkIGxpc3Qgc2VsZWN0aW9uIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbmV4cG9ydCBjb25zdCBjYXJkTGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc1wiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBpbWdNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW1hZ2UtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBpbWdTcmMgPSBpbWdNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWctY2FyZC1pbWdcIik7XHJcbmV4cG9ydCBjb25zdCBpbWdUaXRsZSA9IGltZ01vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltZy10aXRsZVwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpO1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3ZhbGlkYXRpb24vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2Zvcm0taW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm0tYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fZm9ybS1idXR0b24taW5hY3RpdmVcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2Zvcm0taW5wdXQtZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19mb3JtLWVycm9yLWFjdGl2ZVwiLFxyXG59O1xyXG4iLCJpbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IHsgRm9ybVZhbGlkYXRvciB9IGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IHtcclxuICBpbml0aWFsQ2FyZHMsXHJcbiAgZWRpdEJ1dHRvbixcclxuICBhZGRCdXR0b24sXHJcbiAgcHJvZmlsZUZvcm0sXHJcbiAgbmFtZUlucHV0LFxyXG4gIGpvYklucHV0LFxyXG4gIGNhcmRGb3JtLFxyXG4gIHVwZGF0ZUF2YXRhcixcclxuICBhdmF0YXJGb3JtLFxyXG4gIGF2YXRhckltYWdlLFxyXG4gIHByb2ZpbGVOYW1lLFxyXG4gIHByb2ZpbGVKb2IsXHJcbiAgY29uZmlnLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm1hdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanNcIjtcclxuXHJcbmNvbnN0IGVkaXRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnLCBwcm9maWxlRm9ybSk7IC8vY3JlYXRpbmcgYSBuZXcgdmFyIGZvciB0aGUgZWRpdCBtb2RhbCB1c2luZyB0aGUgRm9ybVZhbGlkYXRvciBjbGFzc1xyXG5jb25zdCBhZGRDYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgY2FyZEZvcm0pO1xyXG5jb25zdCBhdmF0YXJVcGRhdGVWYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGF2YXRhckZvcm0pO1xyXG5cclxuY29uc3QgbmV3RWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIucHJvZmlsZS1tb2RhbFwiLFxyXG4gIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0XHJcbik7IC8vY3JlYXRpbmcgYSBuZXcgdmFyIGZvciBlZGl0IGZvcm0gZnJvbSB0aGUgcG9wdXBXaXRoRm9ybSBjbGFzc1xyXG5uZXdFZGl0UG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IG5ld0NhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiLmNhcmQtbW9kYWxcIiwgYWRkQ2FyZEVsZW1lbnQpO1xyXG4vL2NyZWF0aW5nIGEgbmV3IHZhciBmb3IgdGhlIGNhcmQgZm9ybSBmcm9tIHRoZSBwb3B1cFdpdGhGcm9tIGNsYXNzXHJcbm5ld0NhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgYXZhdGFyUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5hdmF0YXItbW9kYWxcIiwgdXBEYXRlQXZhdGFyKTtcclxuYXZhdGFyUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IG5ld0ltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIuaW1hZ2UtbW9kYWxcIik7XHJcbm5ld0ltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IHNlY3Rpb25DYXJkcyA9IG5ldyBTZWN0aW9uKFxyXG4gIHsgaXRlbXM6IGluaXRpYWxDYXJkcywgcmVuZGVyZXI6IGNyZWF0ZUNhcmQgfSxcclxuICBcIi5jYXJkc1wiXHJcbik7XHJcblxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyhcclxuICBcIi5wcm9maWxlX19uYW1lXCIsXHJcbiAgXCIucHJvZmlsZV9fZGVzY3JpcHRvblwiLFxyXG4gIFwiLnByb2ZpbGVfX2ltZ1wiXHJcbik7XHJcblxyXG5jb25zdCBjb25maXJtYXRpb25Qb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oXCIuY29uZmlybWF0aW9uLW1vZGFsXCIpO1xyXG5jb25maXJtYXRpb25Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiYmZiODY5ZTgtMDhlYy00YjY3LThjYzEtNTE4ZjVhMzVlZDllXCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBmdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8vZnVuY3Rpb24gdGhhdCBvcGVuaW5nIHRoZSBpbWcgcG9wdXBcclxuZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhjYXJkKSB7XHJcbiAgbmV3SW1hZ2VQb3B1cC5vcGVuKGNhcmQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGNhcmREYXRhKSB7XHJcbiAgcmV0dXJuIG5ldyBDYXJkKFxyXG4gICAgY2FyZERhdGEsXHJcbiAgICBcIiNjYXJkLXRlbXBsYXRlXCIsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlZEJ1dHRvbkNsaWNrXHJcbiAgKS5nZXRWaWV3KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENhcmRFbGVtZW50KGNhcmREYXRhKSB7XHJcbiAgbmV3Q2FyZFBvcHVwLnNldExvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAuYWRkTmV3Q2FyZChjYXJkRGF0YS50aXRsZSwgY2FyZERhdGEubGluaywgY2FyZERhdGEuX2lkKVxyXG4gICAgLnRoZW4oKGNhcmREYXRhKSA9PiB7XHJcbiAgICAgIHNlY3Rpb25DYXJkcy5hZGRJdGVtKGNyZWF0ZUNhcmQoY2FyZERhdGEpKTtcclxuICAgICAgYWRkQ2FyZEZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgICAgIG5ld0NhcmRQb3B1cC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGFkZE5ld0NhcmQ6XCIsIGVycm9yKTtcclxuICAgIH0pXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIG5ld0NhcmRQb3B1cC5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCh1c2VyRGF0YSkge1xyXG4gIG5ld0VkaXRQb3B1cC5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZVVzZXJJbmZvKHVzZXJEYXRhLm5hbWUsIHVzZXJEYXRhLmRlc2NyaXB0b24pXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHVzZXJEYXRhLm5hbWUsIHVzZXJEYXRhLmRlc2NyaXB0b24pO1xyXG4gICAgICBuZXdFZGl0UG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiB1cGRhdGVVc2VySW5mbzpcIiwgZXJyb3IpO1xyXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJSZXNwb25zZSBib2R5OlwiLCBlcnJvci5ib2R5KTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgbmV3RWRpdFBvcHVwLnNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qXHJcbmhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG9ubHkgYWZ0ZXIgdGhlIGNsaWNrIG9mIHRoZSBkZWxldGVcclxuaWNvbiBvbiB0aGUgY2FyZCB0aGF0IHdlIHdhbnQgdG8gZGVsZXRlXHJcbnRoZSBtZXRob2Qgd2lsbCBvcGVuIHRoZSBwb3B1cCBvZiB0aGUgY29uZmlybSBtb2RhbCBhbmQgd2lsbCB3YWl0IGZvciB0aGUgc3VibWl0IFxyXG5ldmVudCAsIGlmIHRoZSBzdWJtaXQgZXZlbnQgaXMgaGFwcGFuaW5nIG9ubHkgdGhlbiB0aGUgY29uZmlybWF0aW9uUG9wdXAuc2V0U3VibWl0QWN0aW9uKClcclxuKi9cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2soY2FyZCkge1xyXG4gIGNvbmZpcm1hdGlvblBvcHVwLm9wZW4oKTsgLy9vcGVuaW5nIHRoZSBwb3B1cFxyXG4gIGNvbmZpcm1hdGlvblBvcHVwLnNldFN1Ym1pdEFjdGlvbigoKSA9PiB7XHJcbiAgICBjb25maXJtYXRpb25Qb3B1cC5zZXREZWxldGVMb2FkaW5nKHRydWUpOyAvL2NhaG5nZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBjb25maXJtIGJ1dHRvblxyXG4gICAgYXBpXHJcbiAgICAgIC5kZWxldGVDYXJkKGNhcmQuX2lkKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgY2FyZC5yZW1vdmVDYXJkRWxlbWVudChyZXN1bHQpOyAvL2NhcmQuanMgbWV0aG9kIHRvIHJlbW92ZSB0aGUgY2FyZF9lbGVtZW50XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgY29uZmlybWF0aW9uUG9wdXAuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHtlcnJ9IEZhaWxlZCB0byBkZWxldGUgcG9zdC5gKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gZGVsZXRlQ2FyZDpcIiwgZXJyb3IpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgY29uZmlybWF0aW9uUG9wdXAuc2V0RGVsZXRlTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcbi8qXHJcbmhhbmRsZUxpa2VkQnV0dG9uQ2xpY2sgZnVudGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciB0aGUgZXZlbnQgY2xpY2sgb24gdGhlIGxpa2UgYnV0dG9uXHJcbnRoaXMgZnVuY3Rpb24gaXMgcGFzc2VkIHRvIHRoZSBjYXJkIGNsYXNzXHJcbmF0IHRoZSBiZWdpbmluZyBpdHMgY2hlY2tpbmcgaWYgdGhlIGlzTGlrZWQgaXMgdHJ1ZSBvciBmYWxzZSBhbmQgYnkgdGhlIHN0YXRlXHJcbm9mIHRoZSBpc0xpa2VkIGl0cyBkZWNpZGUncyB3aWNoIGFwaSBtZXRob2QgdG8gY2FsbCBcclxuYWZ0ZXIgdGhlIGFwaSBjYWxsIHdlIG1hbnVhbHkgY2hhbmdpbmcgdGhlIGlzTGlrZWQgYXRyaWJ1dGUgb2YgdGhlIGltZyB3aXRoIHRoZVxyXG5zZXRMaWtlIGZ1bmN0aW9uIGZyb20gdGhlIGNhcmQgY2xhc3MgdGhhdCBhZGRpbmcgb3IgcmVtb3ZpbmcgdGhlIGxpa2UgYnV0dG9uXHJcbmFjdGl2ZSBjbGFzc1xyXG4qL1xyXG5mdW5jdGlvbiBoYW5kbGVMaWtlZEJ1dHRvbkNsaWNrKGNhcmQpIHtcclxuICBpZiAoY2FyZC5pc0xpa2VkKSB7XHJcbiAgICBhcGlcclxuICAgICAgLmRpc2xpa2VDYXJkKGNhcmQuX2lkKVxyXG4gICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgY2FyZC5zZXRMaWtlKHJlcy5pc0xpa2VkKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBkaXNsaWtlQ2FyZDpcIiwgZXJyb3IpO1xyXG4gICAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBpXHJcbiAgICAgIC5saWtlQ2FyZChjYXJkLl9pZClcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGNhcmQuc2V0TGlrZShyZXMuaXNMaWtlZCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gdGhlIExpa2VDYXJkOlwiLCBlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBEYXRlQXZhdGFyKGF2YXRhcikge1xyXG4gIGF2YXRhclBvcHVwLnNldExvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAudXBEYXRlQXZhdGVyKGF2YXRhci5saW5rKVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICB1c2VySW5mby5sb2FkVXNlckluZm8ocmVzLm5hbWUsIHJlcy5hYm91dCwgcmVzLmF2YXRhcik7XHJcbiAgICAgIGF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gdXBEYXRlQXZhdGFyOlwiLCBlcnJvcik7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBhdmF0YXJQb3B1cC5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gRXZlbnQgTGlzdGVuZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIG1vZGFsIGV2ZW50cyAvLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5lZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgZWRpdEZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgbmV3RWRpdFBvcHVwLnNldElucHV0VmFsdWVzKHVzZXJJbmZvLmdldFVzZXJJbmZvKCkpO1xyXG4gIG5ld0VkaXRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy8vLy8vLy8vLy8gYWRkIG1vZGFsIGV2ZW50cyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbmFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZENhcmRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIG5ld0NhcmRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxudXBkYXRlQXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgYXZhdGFyVXBkYXRlVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGF2YXRhclBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLyBjYXJkcyBldmVudHMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpOyAvL2NhbGxpbmcgdGhlIGVuYWJsZVZhbGlkYXRpb24gbWV0aG9kIGZyb20gdGhlIG5ldyBjcmVhdGVkIHZhciB0aGF0IGhhcyB0aGlzIG1ldGhvZCBpbnNpZGUgdGhlIGNsYXNzXHJcbmFkZENhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuYXZhdGFyVXBkYXRlVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vQVBJLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuYXBpXHJcbiAgLmdldEluaXRpYWxDYXJkcygpXHJcbiAgLnRoZW4oKGNhcmREYXRhKSA9PiB7XHJcbiAgICBjYXJkRGF0YS5mb3JFYWNoKChjYXJkKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkKGNhcmQpO1xyXG4gICAgICBzZWN0aW9uQ2FyZHMuYWRkSXRlbShuZXdDYXJkKTtcclxuICAgIH0pO1xyXG4gICAgLy9ieSBjYWxsaW5nIHRoZSBhcGkuZ2V0SW5pdGlhbENhcmRzIG1ldGhvZCBvZiB0aGlzIGNsYXNzIGFuZCBwYXNzaW5nIHRoZSByZW5kZXJJdGVtcyBtZXRob2QgdG8gdGhlXHJcbiAgICAvLy50aGVuIG1ldGhvZCBpZiB0aGUgZ2V0IHJlc3BvbnNlIGlzIG9rIG9ubHkgdGhlbiB0aGUgcmVuZGVySXRlbXMgd2lsbCBiZSBjYWxsZWQgYW5kIHRoZSBjYXJkcyB3aWxsXHJcbiAgICAvL2JlIGRpc3BseWVkIHRvIHRoZSBwYWdlXHJcbiAgfSlcclxuICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gZ2V0SW5pdGlhbENhcmRzOlwiLCBlcnJvcik7XHJcbiAgfSk7XHJcblxyXG5hcGlcclxuICAuZ2V0VXNlckluZm8oKVxyXG4gIC50aGVuKCh1c2VyRGF0YSkgPT4ge1xyXG4gICAgdXNlckluZm8ubG9hZFVzZXJJbmZvKHVzZXJEYXRhLm5hbWUsIHVzZXJEYXRhLmFib3V0LCB1c2VyRGF0YS5hdmF0YXIpOyAvL2J5IGNhbGxpbmcgdGhlIGFwaS5sb2FkVXNlckluZm8gbWV0aG9kIG9mIHRoaXMgY2xhc3NcclxuICAgIC8vYW5kIGluIHRoZSAudGhlbiBtZXRob2QgYWZ0ZXIgd2UgZ2V0IGEgcmVzcG9uc2Ugd2UgY2FsbGluZyB0aGUgc2V0VXNlckluZm8gb2YgdGhlIFVzZXJJbmZvIGNsYXNzXHJcbiAgICAvL2FuZCBwYXNzaW5nIGl0IHRoZSB1c2VyRGF0YSBhcyBhIHByb3Blcnl7bmFtZSxhYm91dCBhbmQgYXZhdGFyfSBhcmUgcHJvcG9ydHkgb2YgdGhlIGJvZHkgd2UgZ2V0IGZyb20gdGhlXHJcbiAgICAvL0FQSSBhbmQgaW4gdGhlIHNldFVzZXJJbmZvIHdlIGFzc2luaWcgdGhlIG5hbWUgYW5kIGFib3V0IHRvIHRoZSBuYW1lIGFuZCBkZXNjcmlwdGlvbiB0ZXh0Q29udGVudFxyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldFVzZXJJbmZvOlwiLCBlcnJvcik7XHJcbiAgfSk7XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlU3JjID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19pbWctY2FyZC1pbWdcIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX3BvcHVwVGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1nLXRpdGxlXCIpO1xyXG4gIH1cclxuXHJcbiAgb3Blbih7IHRpdGxlLCBsaW5rIH0pIHtcclxuICAgIHRoaXMuX3BvcHVwVGl0bGUudGV4dENvbnRlbnQgPSB0aXRsZTtcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2VTcmMuc3JjID0gbGluaztcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2VTcmMuYWx0ID0gdGl0bGU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMgPSBbXSwgcmVuZGVyZXIgfSwgY2FyZEVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY2FyZHNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNhcmRFbGVtZW50KTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBuZXdJdGVtID0gdGhpcy5fcmVuZGVyZXIoZWxlbWVudCk7XHJcbiAgICAgIHJldHVybiBuZXdJdGVtO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NhcmRzQ29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yLCBhdmF0YXJJbWFnZSkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2pvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJJbWFnZSk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIGRlc2NyaXB0b246IHRoaXMuX2pvYi50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyhuYW1lLCBkZXNjcmlwdGlvbikge1xyXG4gICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2IudGV4dENvbnRlbnQgPSBkZXNjcmlwdGlvbjtcclxuICB9XHJcblxyXG4gIGxvYWRVc2VySW5mbyhuYW1lLCBkZXNjcmlwdGlvbiwgYXZhdGFyKSB7XHJcbiAgICB0aGlzLnNldFVzZXJJbmZvKG5hbWUsIGRlc2NyaXB0aW9uKTtcclxuICAgIHRoaXMuX2F2YXRhci5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoQ29uZmlybWF0aW9uIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9jb25maXJtYXRpb25CdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIubW9kYWxfX2Zvcm0tYnV0dG9uXCJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gIHRoZSBzZXRTdWJtaXRBY3Rpb24gbWV0aG9kIGdldCBhIGhhbmRsZXIgaW4gdGhpcyBjYXNlIGl0IHdpbGwgYmUgdGhlIHNldERlbGV0ZUxvYWRpbmcgXHJcbiAgYW5kIHRoZSBhcGkgaXRzZWxmIGFmdGVyIHRoYXQgaXQgd2lsbCBiZSBjYWxsZWQgZm9ybSB0aGUgc2V0RXZlbnRMaXN0ZW5lciBhbmQgd2lsbCBiZSB3YXRpbmcgZm9yIFxyXG4gIHRoZSBzdWJtaXQgZXZlbnRcclxuICAqL1xyXG4gIHNldFN1Ym1pdEFjdGlvbihoYW5kbGVyKSB7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBoYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICBzZXREZWxldGVMb2FkaW5nIG1ldGhvZCBnZXQgYSB0cnVlIG9yIGZhbHNlIGFuZCB3aWxsIGRpc3BsYXkgdGhlIHRleHQgQ29udGVudCBcclxuICBvZiB0aGUgY29uZmlybSBidXR0b24gYWNvcmRpbmcgdG8gdGhlIGlmIHN0YXRtZW50XHJcbiAgaXRzIGFsc28gcGFydCBvZiB0aGUgXCJoYW5kbGVyXCIgdGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgZm9ybSB0aGUgc2V0U3VibWl0QWN0aW9uIFxyXG4gICovXHJcbiAgc2V0RGVsZXRlTG9hZGluZyhsb2FkaW5nKSB7XHJcbiAgICBpZiAobG9hZGluZykge1xyXG4gICAgICB0aGlzLl9jb25maXJtYXRpb25CdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0aW5nLi4uXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9jb25maXJtYXRpb25CdXR0b24udGV4dENvbnRlbnQgPSBcIlllc1wiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQoKTsgLy9pdHMgY2FsbGVkIGZvcm0gaGVyZSBzaW5jZSB3ZSB3YXRpbmcgZm9yIGEgc3VibWl0IGV2ZW50XHJcbiAgICB9KTtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBoZWFkZXJzIH0pIHtcclxuICAgIHRoaXMuX2Jhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICAvL19fY2hlY2tSZXNwb25zZSBtZXRob2QgZm9yIGNoZWNraW5nIHRoZSByZXNwb25zZSBvZiB0aGUgc2VydmVyIHJlcXVzdCBpZiBPSyB0aGUgZXRob2QgcmV0dXJuaW5nIGEgSlNPTiBvYmplY3QgZWxzZSBpdHMgcmV0dXJuaW5nIGFuIGVycm9yIHN0YXR1c1xyXG4gIF9jaGVja1Jlc3BvbnNlKHJlcykge1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTsgLy9yZXR1cm5pbmcgdGhlIEpTT04gb2JqZXQgaW4gY2FzZSB0aGUgcmVzIGlzIG9rXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmVycm9yKHJlcy5zdGF0dXMpO1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjoke3Jlcy5zdGF0dXN9YCk7IC8vcmV0dXJuaW5nIEVycm9yIHN0YXR1c1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICB1cERhdGVBdmF0ZXIobGluaykge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVVzZXJJbmZvKG5hbWUsIGRlc2NyaXB0b24pIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGFib3V0OiBkZXNjcmlwdG9uLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBhZGROZXdDYXJkKG5hbWUsIGxpbmssIF9pZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICAgIF9pZDogX2lkLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGRpc2xpa2VDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsIl9yZWYiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlQ2xpY2siLCJoYW5kbGVMaWtlZENsaWNrIiwibmFtZSIsImxpbmsiLCJfaWQiLCJpc0xpa2VkIiwidGhpcyIsInRpdGxlIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX2hhbmRsZUxpa2VkQ2xpY2siLCJfaGFuZGxlTGlrZUJ1dHRvbiIsIl9saWtlQnV0dG9uIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic2V0TGlrZSIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9jYXJkSW1hZ2VFbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGVsZXRlQnV0dG9uIiwiX2dldEVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwicmVtb3ZlQ2FyZEVsZW1lbnQiLCJfY2FyZEVsZW1lbnQiLCJnZXRWaWV3IiwiX2NhcmRUaXRsZUVsIiwidGV4dENvbnRlbnQiLCJzcmMiLCJhbHQiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfZm9ybSIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9oYXNJbnZhbGlkSW5wdXQiLCJfaW5wdXRMaXN0Iiwic29tZSIsImlucHV0RWxlbWVudCIsInZhbGlkaXR5IiwidmFsaWQiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsInN1Ym1pdEJ1dHRvbiIsImRpc2FibGVkIiwiX3Nob3dJbnB1dEVycm9yIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlSW5wdXRFcnJvciIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInJlc2V0VmFsaWRhdGlvbiIsInJlc2V0IiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9wb3B1cEZvcm0iLCJfc3VibWl0QnV0dG9uIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJzZXRJbnB1dFZhbHVlcyIsImRhdGEiLCJzZXRMb2FkaW5nIiwibG9hZGluZyIsImVkaXRCdXR0b24iLCJhZGRCdXR0b24iLCJwcm9maWxlTW9kYWwiLCJwcm9maWxlRm9ybSIsImZvcm1zIiwiYXZhdGFyRm9ybSIsInVwZGF0ZUF2YXRhciIsImFkZE1vZGFsIiwiY2FyZEZvcm0iLCJpbWdNb2RhbCIsImZvcm1TZWxlY3RvciIsImVkaXRGb3JtVmFsaWRhdG9yIiwiYWRkQ2FyZEZvcm1WYWxpZGF0b3IiLCJhdmF0YXJVcGRhdGVWYWxpZGF0b3IiLCJuZXdFZGl0UG9wdXAiLCJ1c2VyRGF0YSIsImFwaSIsInVwZGF0ZVVzZXJJbmZvIiwiZGVzY3JpcHRvbiIsInRoZW4iLCJ1c2VySW5mbyIsInNldFVzZXJJbmZvIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJTeW50YXhFcnJvciIsImJvZHkiLCJmaW5hbGx5IiwibmV3Q2FyZFBvcHVwIiwiY2FyZERhdGEiLCJhZGROZXdDYXJkIiwic2VjdGlvbkNhcmRzIiwiYWRkSXRlbSIsImNyZWF0ZUNhcmQiLCJhdmF0YXJQb3B1cCIsImF2YXRhciIsInVwRGF0ZUF2YXRlciIsInJlcyIsImxvYWRVc2VySW5mbyIsImFib3V0IiwibmV3SW1hZ2VQb3B1cCIsIl9wb3B1cEltYWdlU3JjIiwiX3BvcHVwVGl0bGUiLCJjYXJkRWxlbWVudCIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY2FyZHNDb250YWluZXIiLCJyZW5kZXJJdGVtcyIsImVsZW1lbnQiLCJwcmVwZW5kIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJhdmF0YXJJbWFnZSIsIl9uYW1lIiwiX2pvYiIsIl9hdmF0YXIiLCJnZXRVc2VySW5mbyIsImRlc2NyaXB0aW9uIiwiY29uZmlybWF0aW9uUG9wdXAiLCJfY29uZmlybWF0aW9uQnV0dG9uIiwic2V0U3VibWl0QWN0aW9uIiwiaGFuZGxlciIsIl9oYW5kbGVTdWJtaXQiLCJzZXREZWxldGVMb2FkaW5nIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwiX2NoZWNrUmVzcG9uc2UiLCJvayIsImpzb24iLCJzdGF0dXMiLCJQcm9taXNlIiwicmVqZWN0IiwiZmV0Y2giLCJtZXRob2QiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0SW5pdGlhbENhcmRzIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImxpa2VDYXJkIiwiZGlzbGlrZUNhcmQiLCJhdXRob3JpemF0aW9uIiwiY2FyZCIsImhhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrIiwiaGFuZGxlTGlrZWRCdXR0b25DbGljayIsInJlc3VsdCIsImVyciIsIm5ld0NhcmQiXSwic291cmNlUm9vdCI6IiJ9